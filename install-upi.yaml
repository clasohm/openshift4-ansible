---
- name: dark magic
  gather_facts: false
  hosts: localhost
  vars:
    region: "us-west-2"
    clusterid: "foobar"
    publiczoneid: "ZOC70SORUQC4ZO"
    publiczonename: "ocp4.aws.example.com"
    privatezoneid: "ZB5JSFHSIEHVAG"
    privatezonename: "aws.example.com"
# subnet order matters, needs to be az1,az2,az3,etc
    privatesubnets: "subnet-a62e89d2f27096776,subnet-965bf47c8c64ace62,subnet-69fca4cfc562cdcca"
    publicsubnets: "subnet-a86c92536490376fd,subnet-dc4fa13075bf07989,subnet-80d0b5c13ba100d5e"
    vpcid: "vpc-bcb26f4011256a1fd"
    vpccidr: "10.30.0.0/18"
    rhcos_ami: "ami-d9430bd57f96ad9e9"
#get from try.openshift.com
    pull_secret: '{"auths":{"cloud.openshift.com":{"auth":"b3BjRsRVVSdnA..... example.com"}}}'
# replace with your public SSH key for troubleshooting
    ssh_key: "ssh-rsa AAAAB3... user@example.com"


  tasks:
    - name: create cluster install config directory
      file:
        path: /tmp/{{ clusterid }}
        state: "{{ state | default('directory') }}"
        mode: 0755
      when:
        - ( state is not defined ) or ( 'absent' not in state )

    - name: "Check if /tmp/{{ clusterid }}/metadata.json exists"
      stat:
        path: /tmp/{{ clusterid }}/metadata.json
      register: stat_result

    - name: render template
      template:
        src: files/install-config.yaml.j2
        dest: /tmp/{{ clusterid }}/install-config.yaml
      when: stat_result.stat.exists == False

    - name: Create the cluster ignition configs
      command: openshift-install create ignition-configs --dir=/tmp/{{ clusterid }}
      args:
        creates: /tmp/{{ clusterid }}/metadata.json
      when: stat_result.stat.exists == False

    - name: read master CA info
      command: cat /tmp/{{ clusterid }}/master.ign
      register: result

    - set_fact:
        master_ignition: "{{ result.stdout | from_json }}"

#    - debug:
#        msg: "{{ master_ignition.ignition.security.tls.certificateAuthorities[0].source }}"


#todo: map state absent to mode delete
    - name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} S3 bucket ( bootstrap config )"
      aws_s3:
        bucket: "{{ clusterid }}-bootstrap"
        region: "{{ region }}"
        mode: "{{ state | default('create') }}"
      retries: 3
      delay: 3
      when:
        - ( state is not defined ) or ( 'absent' not in state )

    - name: upload bootstrap.ign to s3 bucket
      aws_s3:
        bucket: "{{ clusterid }}-bootstrap"
        object: /bootstrap.ign
        src: /tmp/{{ clusterid }}/bootstrap.ign
        mode: "{{ state | default('put') }}"
      retries: 3
      delay: 3
      when:
        - ( state is not defined ) or ( 'absent' not in state )

    - name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} UPI Network Elements (Route53 & LBs)"
      cloudformation:
        stack_name: "{{ clusterid }}-cluster-infra"
        state: "{{ state | default('present') }}"
        region: "{{ region }}"
        template: "files/cloudformation/02_cluster_infra.yaml"
        template_parameters:
          ClusterName: "{{ clusterid }}"
          PrivateSubnets: "{{ privatesubnets}}"
          PrivateZoneId: "{{ privatezoneid }}"
          PublicSubnets: "{{ publicsubnets }}"
          PublicZoneId: "{{ publiczoneid }}"
          PublicZoneName: "{{ publiczonename }}"
          VpcId: "{{ vpcid }}"
        tags:
          clusterid: "{{ clusterid }}"
      when:
        - ( state is not defined ) or ( 'absent' not in state )
      register: cluster_infra_stack

#    - debug:
#        msg: "{{ cluster_infra_stack.stack_outputs}}"


    - name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} UPI Security Elements (Security Groups & IAM)"
      cloudformation:
        stack_name: "{{ clusterid }}-cluster-security"
        state: "{{ state | default('present') }}"
        region: "{{ region }}"
        template: "files/cloudformation/03_cluster_security.yaml"
        template_parameters:
          ClusterName: "{{ clusterid }}"
          PrivateSubnets: "{{ privatesubnets}}"
          VpcId: "{{ vpcid }}"
          VpcCidr: "{{ vpccidr }}"
        tags:
          clusterid: "{{ clusterid }}"
      when:
        - ( state is not defined ) or ( 'absent' not in state )
      register: cluster_security_stack

#    - debug:
#        msg: "{{ cluster_security_stack.stack_outputs.MasterSecurityGroupId }}"

    - name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} UPI Bootstrap (EC2 Instance, Security Groups and IAM)"
      cloudformation:
        stack_name: "{{ clusterid }}-cluster-bootstrap"
        state: "{{ state | default('present') }}"
        region: "{{ region }}"
        template: "files/cloudformation/04_cluster_bootstrap.yaml"
        template_parameters:
          BootstrapIgnitionLocation: s3://{{ clusterid }}-bootstrap//bootstrap.ign
          ClusterName: "{{ clusterid }}"
          VpcId: "{{ vpcid }}"
          AutoRegisterELB: "yes"
          AllowedBootstrapSshCidr: "0.0.0.0/0"
          MasterSecurityGroupId: "{{ cluster_security_stack.stack_outputs.MasterSecurityGroupId }}"
          PublicSubnet: "{{ publicsubnets.split(',')[0] }}"
          RhcosAmi: "{{ rhcos_ami }}"
          ExternalApiTargetGroupArn: "{{ cluster_infra_stack.stack_outputs.ExternalApiTargetGroupArn }}"
          InternalApiTargetGroupArn: "{{ cluster_infra_stack.stack_outputs.InternalApiTargetGroupArn }}"
          InternalServiceTargetGroupArn: "{{ cluster_infra_stack.stack_outputs.InternalServiceTargetGroupArn }}"
          RegisterNlbIpTargetsLambdaArn: "{{ cluster_infra_stack.stack_outputs.RegisterNlbIpTargetsLambda }}"
        tags:
          clusterid: "{{ clusterid }}"
      when:
        - ( state is not defined ) or ( 'absent' not in state )

    - name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} UPI Node Launch (EC2 master instances)"
      cloudformation:
        stack_name: "{{ clusterid }}-cluster-master-nodes"
        state: "{{ state | default('present') }}"
        region: "{{ region }}"
        template: "files/cloudformation/05_cluster_master_nodes.yaml"
        template_parameters:
          ClusterName: "{{ clusterid }}"
          AutoRegisterELB: "yes"
          MasterSecurityGroupId: "{{ cluster_security_stack.stack_outputs.MasterSecurityGroupId }}"
          Master0Subnet: "{{ privatesubnets.split(',')[0] }}"
          Master1Subnet: "{{ privatesubnets.split(',')[1] }}"
          Master2Subnet: "{{ privatesubnets.split(',')[2] }}"
          MasterInstanceProfileName: "{{ cluster_security_stack.stack_outputs.MasterInstanceProfile }}"
          MasterInstanceType: "m4.2xlarge"
          RhcosAmi: "{{ rhcos_ami }}"
          ExternalApiTargetGroupArn: "{{ cluster_infra_stack.stack_outputs.ExternalApiTargetGroupArn }}"
          InternalApiTargetGroupArn: "{{ cluster_infra_stack.stack_outputs.InternalApiTargetGroupArn }}"
          InternalServiceTargetGroupArn: "{{ cluster_infra_stack.stack_outputs.InternalServiceTargetGroupArn }}"
          RegisterNlbIpTargetsLambdaArn: "{{ cluster_infra_stack.stack_outputs.RegisterNlbIpTargetsLambda }}"
          AutoRegisterDNS: "yes"
          IgnitionLocation: "https://api.{{ clusterid }}.{{ publiczonename }}:22623/config/master"
          PrivateHostedZoneId: "{{ privatezoneid }}"
#this is confusing but right for in some cases. in others use the privatezonename var
          PrivateHostedZoneName: "{{ clusterid }}.{{ publiczonename }}"
          CertificateAuthorities: "{{ master_ignition.ignition.security.tls.certificateAuthorities[0].source }}"
        tags:
          clusterid: "{{ clusterid }}"
      when:
        - ( state is not defined ) or ( 'absent' not in state )

    - name: tag subnets
      shell: |
        aws ec2 create-tags --resources "{{ publicsubnets.split(',')[0] }}" --tags Key=kubernetes.io/cluster/{{ clusterid }},Value=shared
        aws ec2 create-tags --resources "{{ publicsubnets.split(',')[1] }}" --tags Key=kubernetes.io/cluster/{{ clusterid }},Value=shared
        aws ec2 create-tags --resources "{{ publicsubnets.split(',')[2] }}" --tags Key=kubernetes.io/cluster/{{ clusterid }},Value=shared
      #with_sequence: start=0 count=3

    - name: "Check if /tmp/{{ clusterid }}/bootstrap-complete exists"
      stat:
        path: /tmp/{{ clusterid }}/bootstrap-complete
      register: bootstrap_result

    - name: Wait until bootstrap is complete
      shell: |
        set -e
        openshift-install user-provided-infrastructure bootstrap-complete --dir=/tmp/{{ clusterid }}
        touch /tmp/{{ clusterid }}/bootstrap-complete
      when: bootstrap_result.stat.exists == False

    - name: approve master certificates
      shell: |
        export KUBECONFIG=/tmp/{{ clusterid }}/auth/kubeconfig
        oc adm certificate approve $(oc get csr -o=jsonpath="{..metadata.name}")
      ignore_errors: yes

    - name: delete broken machine and machineset definitions
      shell: |
        export KUBECONFIG=/tmp/{{ clusterid }}/auth/kubeconfig
        oc -n openshift-machine-api delete machineset -l machine.openshift.io/cluster-api-cluster!={{ clusterid }}
        oc -n openshift-machine-api delete machine    -l machine.openshift.io/cluster-api-cluster!={{ clusterid }}

    - name: render machineset template
      template:
        src: files/machinesets.yaml.j2
        dest: /tmp/{{ clusterid }}/machineset-{{ item.value }}.yaml
      with_dict: {a: 0, b: 1, c: 2}

    - name: import machinesets
      shell: |
        export KUBECONFIG=/tmp/{{ clusterid }}/auth/kubeconfig
        oc -n openshift-machine-api create -f /tmp/{{ clusterid }}/machineset-{{ item }}.yaml
      with_sequence: start=0 count=3
      ignore_errors: yes

    - name: render DNS settings
      template:
        src: files/dnses.yaml.j2
        dest: /tmp/{{ clusterid }}/dnses.yaml

    - name: fix dns settings
      shell: |
        export KUBECONFIG=/tmp/{{ clusterid }}/auth/kubeconfig
        oc replace -f /tmp/{{ clusterid }}/dnses.yaml
        
    - name: workaround for missing kubeadmin-password file
      copy:
        dest: "/tmp/{{ clusterid }}/auth/kubeadmin-password"
        content: "REDACTED, use kubeconfig instead"
        
    - name: Wait until install is complete
      command: openshift-install user-provided-infrastructure finish --dir=/tmp/{{ clusterid }}


...
